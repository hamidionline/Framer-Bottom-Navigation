# Android Bottom Navigation Module for Framer

# Created by John Sherwin

# Github - https://github.com/johnmpsherwin
# Dribbble - https://dribbble.com/johnsherwin
# Twitter - https://twitter.com/johnmpsherwin

class exports.BottomNavigation extends Layer
	constructor: (@options={}) ->

		# Set Custom Options
		@_items = @options.items ? [["Explore", "explore", "#0F6FFF"], ["Movies", "movie", "#EE4444"], ["Music", "album", "#541FDB"], ["Favorites", "favorite", "#00B39E"]]
		@_defaultActiveItem = @options.defaultActiveItem ? 0
		@_withSystemNav = @options.withSystemNav ? false
		@_color = @options.color ? "rgba(255, 255, 255, .70)"
		@_activeColor = @options.activeColor ? "rgba(255, 255, 255, 1)"
		@_backgroundColor = @options.backgroundColor ? @_items[@_defaultActiveItem][2] ? "#0F6FFF"
		@_colorRipple = @options.colorRipple ? false
		@_parent = @options.parent ? undefined
		@_materialIcons = @options.materialIcons ? true
		@_y = @options.y ? undefined

		items = @_items
		defaultActiveItem = @_defaultActiveItem
		defaultColor = @_color
		activeColor = @_activeColor
		colorRipple = @_colorRipple
		withSystemNav = @_withSystemNav
		materialIcons = @_materialIcons

		if materialIcons
			# Insert link to material icons in index.html head
			link = document.createElement ("link")
			link.rel = "stylesheet"
			link.href = "https://fonts.googleapis.com/icon?family=Material+Icons"
			head = document.getElementsByTagName("head")[0];
			head.appendChild(link)

		super _.defaults @options,

		# Set defaults
		width: Screen.width
		height: if withSystemNav then 104 else 56
		y: @options.y ? Align.bottom
		parent: @_parent
		backgroundColor: @_backgroundColor
		name: "BottomNavigation"
		clip: true

		# Create items based on the number of nested arrays in @_items
		@viewItems = []
		viewItems = @viewItems
		for i in [0...items.length]

			@viewItem = new Layer
				parent: @
				y: 0
				height: if withSystemNav then @height/2 else @height
				width: @width / @_items.length
				x: i * @width / @_items.length
				backgroundColor: undefined
				name: "item#{i+1}"

			@icon = new Layer
				parent: @viewItem
				size: 24
				backgroundColor: undefined
				html: if materialIcons then "<i class='material-icons' style='color:#{@_color}'>#{@_items[i][1]}</i>" else "<svg style='padding: 2px' preserveAspectRatio='xMinYMin meet' width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'><path d='#{@_items[i][1]}' fill='#{@_color}' fill-rule='evenodd'/></svg>"
				x: Align.center(), y: Align.center()
				name: "icon#{i+1}"

			@label = new TextLayer
				text: items[i][0]
				parent: @viewItem
				font: "400 12px/1.5 Roboto"
				color: @_color
				x: Align.center(), y: Align.center(12)
				opacity: 0
				name: "label#{i+1}"

			@viewItems.push(@viewItem)

		# System navigation generated by setting 'withSystemNav' boolean
		@systemIconData = [
			"M13 1.85V14.15a1 1 0 0 1-1.52.854L1.38 8.855a1 1 0 0 1 0-1.709L11.48.996a1 1 0 0 1 1.52.853z"
			"M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16zm0-1A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0-1A6 6 0 1 1 8 2a6 6 0 0 1 0 12z"
			"M0 1.5v11A1.5 1.5 0 0 0 1.5 14h11a1.5 1.5 0 0 0 1.5-1.5v-11A1.5 1.5 0 0 0 12.5 0h-11A1.5 1.5 0 0 0 0 1.5z"
		]

		if withSystemNav
			@systemNavigation = new Layer
				parent: @
				width: @width
				height: @height / 2
				backgroundColor: 'rgba(0, 0, 0, .40)'
				y: Align.bottom
				name: "systemNavigation"

			systemNavigationBtns = []
			for systemBtn in [0...3]
				@systemNavigationBtn = new Layer
					parent: @systemNavigation
					height: @systemNavigation.height
					width: @width / 3
					backgroundColor: null
					x: systemBtn * @width / 3
					name: "systemBtn#{systemBtn}"

				systemNavigationBtns.push(@systemNavigationBtn)

			systemIcons = []
			for systemBtn in systemNavigationBtns
				systemIcon = new Layer
					size: 16
					parent: systemBtn
					point: if @index is 1 then Align.center else null

				systemIcons.push(systemIcon)

			systemIcons[0].props =
				name: "icon"
				x: Align.right(-24)
				y: Align.center
				backgroundColor: null
				html: "<svg width='14' height='16' viewBox='0 0 16 16' xmlns='http://www.w3.org/2000/svg'><path d='#{@systemIconData[0]}' fill='#FFF' fill-rule='evenodd'/></svg>"

			systemIcons[1].props =
				name: "icon"
				point: Align.center
				backgroundColor: null
				html: "<svg width='16' height='16' viewBox='0 0 16 16' xmlns='http://www.w3.org/2000/svg'><path d='#{@systemIconData[1]}' fill='#FFF' fill-rule='evenodd'/></svg>"

			systemIcons[2].props =
				name: "icon"
				x: Align.left(24)
				y: Align.center
				backgroundColor: null
				html: "<svg style='padding:1px' width='14' height='14' viewBox='0 0 16 16' xmlns='http://www.w3.org/2000/svg'><path d='#{@systemIconData[2]}' fill='#FFF' fill-rule='evenodd'/></svg>"

		# Store some global variables to be used inside the for loop below
		tappedItem = undefined
		colorRippleCheck = colorRipple

		# Set item styles and behaviour
		for viewItem, i in viewItems

			viewItems[defaultActiveItem].children[0].props =
				html: if materialIcons then "<i class='material-icons' style='color:#{activeColor}'>#{items[defaultActiveItem][1]}</i>" else "<svg style='padding: 2px' preserveAspectRatio='xMinYMin meet' width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'><path d='#{items[defaultActiveItem][1]}' fill='#{@_activeColor}' fill-rule='evenodd'/></svg>"
				y: Align.center(-8)
			viewItems[defaultActiveItem].children[1].props =
				color: activeColor
				y: Align.bottom(-4)
				opacity: 1

			# Item interactions and animations
			viewItem.onTap ->

				# Store the index of the currently selected item
				tappedItem = @index

				for viewItem, i in viewItems

					# Set default item appearance on all items
					viewItem.subLayers[0].props =
						html: if materialIcons then "<i class='material-icons' style='color:#{defaultColor}'>#{items[i][1]}</i>" else "<svg style='padding: 2px' preserveAspectRatio='xMinYMin meet' width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'><path d='#{items[i][1]}' fill='#{defaultColor}' fill-rule='evenodd'/></svg>"
					viewItem.subLayers[0].animate
						x: Align.center(), y: Align.center()
						options: { curve: "spring(500, 40, 0)" }

					viewItem.subLayers[1].animate
						color: defaultColor
						y: Align.center(8)
						opacity: 0
						options: { curve: "spring(800, 60, 10)"  }

					# Set appearance of currently selected items
					@subLayers[0].props =
						html: if materialIcons then "<i class='material-icons' style='color:#{activeColor}'>#{items[@index][1]}</i>" else "<svg style='padding: 2px' preserveAspectRatio='xMinYMin meet' width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'><path d='#{items[@index][1]}' fill='#{activeColor}' fill-rule='evenodd'/></svg>"

					@subLayers[0].animate
						y: Align.center(-8)
						options: { curve: "spring(500, 40, 0)" }

					@subLayers[1].animate
						color: activeColor
						y: Align.bottom(-2)
						opacity: 1
						options: { curve: "spring(800, 60, 10)" }

				# Color ripple effect generated by setting 'colorRipple' boolean
				if colorRippleCheck is true

					colorRipple = new Layer
						name: "colorRipple"
						parent: @parent
						midX: @midX, midY: @midY
						size: Screen.width * 2
						scale: .30
						borderRadius: "100%"
						backgroundColor: items[tappedItem][2]
						index: -1

					colorRipple.animate
						scale: 1
						options: { curve: "spring(140, 16, 0)" }

					colorRipple.onAnimationEnd ->
						@parent.backgroundColor = colorRipple.backgroundColor
						@destroy()
